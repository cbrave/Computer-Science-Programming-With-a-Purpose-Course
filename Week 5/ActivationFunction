public class ActivationFunction {

    public static double heaviside(double x) {
        if (x < 0) {
            return 0.0;
        }
        else if (x == 0) {
            return 0.5;
        }
        else if (x > 0) {
            return 1;
        }
        else
            return Double.NaN;
    }

    public static double sigmoid(double x) {
        double denom = 1 + java.lang.Math.exp(-x);
        if (denom != 0) {
            return 1 / denom;
        }
        else
            return java.lang.Double.NaN;
    }

    public static double tanh(double x) {
        double numer = java.lang.Math.exp(x) - java.lang.Math.exp(-x);
        double denom = java.lang.Math.exp(x) + java.lang.Math.exp(-x);
        if (denom != 0) {
            return numer / denom;
        }
        else
            return java.lang.Double.NaN;
    }

    public static double softsign(double x) {
        double numer = x;
        double denom = 1 + java.lang.Math.abs(x);
        if (denom != 0) {
            return numer / denom;
        }
        else
            return java.lang.Double.NaN;
    }

    public static double sqnl(double x) {
        if (x <= -2)
            return -1;
        else if (x > -2 && x < 0)
            return x + java.lang.Math.pow(x, 2) / 4;
        else if (x > 0 && x < 2) {
            if (x != java.lang.Math.pow(x, 2) / 4)
                return x - java.lang.Math.pow(x, 2) / 4;
            else
                return Double.NaN;
        }
        else if (x > 2)
            return 1;
        else
            return Double.NaN;
    }

    public static void main(String[] args) {
        double x = Double.parseDouble(args[0]);
        StdOut.printf("heaviside(%.1f) = %-1.6f\n", x, heaviside(x));
        StdOut.printf("sigmoid(%.1f) = %-1.6f\n", x, sigmoid(x));
        StdOut.printf("tanh(%.1f) = %-1.6f\n", x, tanh(x));
        StdOut.printf("softsign(%.1f) = %-1.6f\n", x, softsign(x));
        StdOut.printf("sqnl(%.1f) = %-1.6f\n", x, sqnl(x));
    }
}
